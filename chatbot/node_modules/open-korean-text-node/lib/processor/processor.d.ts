import { AbstractJavaClass, KoreanToken, Sentence } from '../classes';
import { IntermediaryTokensObject } from './tokens';
export interface ExcludePhrasesOptions {
    filterSpam?: boolean;
    includeHashtag?: boolean;
}
export declare class OpenKoreanTextProcessor extends AbstractJavaClass {
    static className: string;
    static ensureJvm(done: () => void): void;
    static ensureJvm(): Promise<void>;
    static isJvmCreated(): boolean;
    static normalize(text: string): Promise<string>;
    static normalizeSync(text: string): string;
    static tokenize(text: string): Promise<IntermediaryTokensObject>;
    static tokenizeSync(text: string): IntermediaryTokensObject;
    static addNounsToDictionary(...words: string[]): Promise<void>;
    static addNounsToDictionarySync(...words: string[]): void;
    static tokensToJsonArray(tokens: IntermediaryTokensObject, keepSpace?: boolean): Promise<KoreanToken[]>;
    static tokensToJsonArraySync(tokens: IntermediaryTokensObject, keepSpace?: boolean): KoreanToken[];
    static splitSentences(text: string): Promise<Sentence[]>;
    static splitSentencesSync(text: string): Sentence[];
    static extractPhrases(tokens: IntermediaryTokensObject, options?: ExcludePhrasesOptions): Promise<KoreanToken>;
    static extractPhrasesSync(tokens: IntermediaryTokensObject, options?: ExcludePhrasesOptions): KoreanToken;
    static detokenize(tokens: IntermediaryTokensObject): Promise<string>;
    static detokenize(words: string[]): Promise<string>;
    static detokenize(...words: string[]): Promise<string>;
    static detokenizeSync(tokens: IntermediaryTokensObject): string;
    static detokenizeSync(words: string[]): string;
    static detokenizeSync(...words: string[]): string;
}
